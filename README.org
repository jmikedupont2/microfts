* Microfts
A small full text indexing and search tool focusing on speed and
space.  Initial tests seem to indicate that the database takes about
twice as much space as the files it indexes.

Microfts uses [[http://www.lmdb.tech/doc/index.html][LMDB]] for its database and [[https://github.com/AskAlexSharov/lmdb-go/lmdb][AskAlexSharov's fork]] of
[[https://github.com/bmatsuo/lmdb-goto][bmatsuo's lmdb-go package]] to connect to it.

* LICENSE

Microfts is MIT licensed, (c) 2020 Bill Burdick. All rights reserved.

* Building
Note that building may generate warning messages from lmdb-go's compilation of the LMDB C code.
#+begin_src sh
go build -o microfts
#+end_src

* Examples
** Creating a database
#+begin_src sh
./microfts create /tmp/bubba
#+end_src
** Adding Text
This adds /tmp/tst to the database in /tmp/bubba
#+begin_src sh
rm -rf /tmp/bubba
./microfts create /tmp/bubba
cat > /tmp/tst <<here
one
two three
four
four five
one two three
one three two
here
./microfts input -file /tmp/bubba /tmp/tst
#+end_src
** Getting Info
#+begin_src sh
./microfts info /tmp/bubba
#+end_src
** Searching
#+begin_src sh
./microfts search /tmp/bubba "one two"
#+end_src
** Deleting a file's information
#+begin_src sh
./microfts delete /tmp/bubba /tmp/tst
#+end_src
** Reclaiming space in the database (only really matters after deleting a large file)
#+begin_src sh
./microfts compact /tmp/bubba
#+end_src
* Usage
#+begin_example
Usage:
   microfts info [-dx | -nx | -grams | -gx] DB [GROUP]
                   print info for database or GROUP
                   displays any groups which do not exist as files
                   displays any groups which refer to files that have changed
   microfts create [-s GRAMSIZE] DB
                   create DATABASE if it does not exist
   microfts chunk [-nx | -data D | -dx] -d DELIM DB GROUP GRAMS
   microfts chunk [-nx | -data D | -dx] -gx DB GROUP GRAMS
                   ADD a chunk to GROUP with GRAMS.
                   -d means use DELIM to split GRAMS.
                   -gx means GRAMS is hex encoded with two bytes for each gram using base 37.
   microfts grams [-gx] CHUNK
                   output grams for CHUNK
   microfts input [-nx | -dx | -] DB GROUP...
                   Create GROUP and add a CHUNK for each line of input.
                   Chunk data is the number, offset, and length for each line (starting at 1).
                   - means to read from stdin, otherwise GROUP is the name of the input file
   microfts delete [-nx] DB GROUP
                   delete GROUP, its chunks, and tag entries.
                   NOTE: THIS DOES NOT RECLAIM SPACE! USE COMPACT FOR THAT
   microfts compact DB
                   Reclaim space for deleted groups
   microfts search [-n | -partial | -f] DB TEXT
                   query with TEXT for objects
                   -f forces the search to continue even if files are missing or out of date
   microfts search -candidates [-grams | -d D | -gx | -sep | -n | -partial | -f] DB TERMS
                   find all candidates with the grams for TERMS
                   -grams indicates TERMS are grams, otherwise extract grams from TERMS
   microfts data [-nx | -dx] DB GROUP
                   get data for each doc in GROUP
   microfts update [-t] DB
                   reinput files that have changed
                   delete files that have been removed
                   -t means do a test run, printing what would have happened

   microfts is targeted for groups of small documents, like lines in a file.

  -     read from stdin instead of a file named GROUP
  -candidates
        return docs with grams for search
  -comp string
        compression type to use when creating a database
  -d string
        delimiter for unicode tags (default ",")
  -data string
        data to define for object
  -dx
        use hex instead of unicode for object data
  -f    search: continue even if files are changed or missing
  -grams
        get: specify tags for intead of text
        info: print gram coverage
        search: specify grams instead of search terms
  -gx
        use hex instead of unicode for grams
  -n    only print line numbers for search
  -org
        index org-mode chunks instead of lines
  -partial
        search: allow partial matches in search
  -s int
        gram size
  -sep
        print candidates on separate lines
  -t    update: do a test run, printing what would have happened
  -v    verbose
#+end_example
* Notes
** Grams
Only alphanumeric characters are represented faithfully in grams, other characters are considered whitespace and display as '.'. This makes a base-37 triple (0-9 and A-Z), which just fits into 2 bytes. Which is a big deal, spacewise.  Grams for starts of words begin with two whitespaces and ends of words end with one whitespace. There are no grams that end with two whitespaces.
** Groups and chunks
The index consists of grams for chunks that belong to groups. Groups have names and the default is to use file names as group names.

*** Supported groups and chunks
Microfts supports using file names as groups and splitting files into chunks either by line or by org-mode element, with the chunk data being a triple of line, offset, chunk-length. Searching finds candidate chunks by intersecting gram entries and then consults the files named by the groups for the actual content.
*** Custom groups and chunks
If this is not sufficient, the command also supports custom usage: you can add chunks to a group, specifying data and grams. Searching can return candidate chunks for a set of grams.
** Compressed representation for unsigned integers (lexicographically orderable)
| 7 bits  | 0                   - 127                  | 0xxxxxxx                 |
| 12 bits | 128                 - 4095                 | 1000xxxx X               |
| 20 bits | 4096                - 1048575              | 1001xxxx X X             |
| 28 bits | 1048576             - 268435455            | 1010xxxx X X X           |
| 36 bits | 268435456           - 68719476735          | 1011xxxx X X X X         |
| 44 bits | 68719476736         - 17592186044415       | 1100xxxx X X X X X       |
| 52 bits | 17592186044416      - 4503599627370495     | 1101xxxx X X X X X X     |
| 60 bits | 4503599627370496    - 1152921504606846975  | 1110xxxx X X X X X X X   |
| 64 bits | 1152921504606846976 - 18446744073709551615 | 1111---- X X X X X X X X |
** LMDB Trees
*** Grams: GRAM-> BLOCK
GRAM is a 2-byte value
|----------|
| OID LIST |
|----------|
*** OID LISTS
9 lists of oids: [9][]byte.

Note -- this is probably too ornate and a simple byte array and a
count might have the same performance and space.
|---------------|
| # 1-byte OIDS |
| # 2-byte OIDS |
| # 3-byte OIDS |
| # 4-byte OIDS |
| # 5-byte OIDS |
| # 6-byte OIDS |
| # 7-byte OIDS |
| # 8-byte OIDS |
| # 9-byte OIDS |
| OIDS          |
|---------------|
*** Gram 0 holds the info since 0 is not a legal gram
|-----------------|
| next unused oid |
| next unused gid |
| free oids       |
| free gids       |
|-----------------|
*** Chunks: OID -> BLOCK
OIDS are compressed integers
|-------------------------|
| GID                     |
| data (e.g. line number) |
| gram count              |
|-------------------------|
*** Groups: GID -> BLOCK
GIDS are compressed integers
|-----------------------------------|
| NAME                              |
| oid count                         |
| last changed timestamp            |
| validity (valid = 0, deleted = 1) |
|-----------------------------------|
*** Group Names: NAME->GID
